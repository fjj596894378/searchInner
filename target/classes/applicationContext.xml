<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="
                    http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                    http://www.springframework.org/schema/tx 
                    http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
                    http://www.springframework.org/schema/aop 
                    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
                    http://www.springframework.org/schema/data/mongo   
          			http://www.springframework.org/schema/data/mongo/spring-mongo-1.0.xsd 
                    http://www.springframework.org/schema/context      
                    http://www.springframework.org/schema/context/spring-context-3.1.xsd
                    http://www.springframework.org/schema/cache 
                    http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
                    http://www.springframework.org/schema/task  
					http://www.springframework.org/schema/task/spring-task-3.1.xsd
                    http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">

	<!-- 注解支持 -->
	<!-- <context:annotation-config /> -->
<!-- 
<import resource="spring-security.xml" /> -->
	 <context:component-scan base-package="com.searchinner" />	
	 <!-- 缓存配置(两种) -->
	<!-- 启用缓存注解功能(请将其配置在Spring主配置文件中) -->
	<cache:annotation-driven />
	<task:annotation-driven/>

    
	<!-- 属性文件位置 -->
	<bean id="annotationPropertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
			<!-- 	<value>classpath:mongodb.properties</value> -->
			<value>classpath:oracle.properties</value>
				<value>classpath:log4j.properties</value>
				<value>classpath:quartz.properties</value>
			</list>
		</property>
	</bean>



	<!-- 实体映射 -->
	<!-- <bean id="packagesToScan" class="org.springframework.beans.factory.config.ListFactoryBean"> 
		<property name="sourceList"> <list> <value>com.searchinner.model.Article</value> 
		</list> </property> </bean> -->

	<!-- 注解式事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
	</bean>

	<!-- 定义mongo对象，对应的是mongodb官方jar包中的Mongo，replica-set设置集群副本的ip地址和端口 -->
	<!-- <mongo:mongo id="mongo" replica-set="${mongo.hostport}"> 一些连接属性的设置 
		<mongo:options connections-per-host="${mongo.connectionsPerHost}" threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}" 
		connect-timeout="${mongo.connectTimeout}" max-wait-time="${mongo.maxWaitTime}" 
		auto-connect-retry="${mongo.autoConnectRetry}" socket-keep-alive="${mongo.socketKeepAlive}" 
		socket-timeout="${mongo.socketTimeout}" slave-ok="${mongo.slaveOk}" write-number="1" 
		write-timeout="0" write-fsync="true" /> </mongo:mongo> <mongo:db-factory 
		dbname="database" mongo-ref="mongo" /> <bean name="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate"> 
		<constructor-arg ref="mongo" /> <constructor-arg name="databaseName" value="db_mongo" 
		/> </bean> -->
	<!-- 定义mongo对象，对应的是mongodb官方jar包中的Mongo，replica-set设置集群副本的ip地址和端口 -->
	<!-- oracle -->
	<!-- <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> 
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property> 
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:learn"></property> 
		<property name="username" value="scott"></property> <property name="password" 
		value="tiger"></property> -->
	<!-- 引入jdbc配置文件 -->
     <!--配置数据源 mysql -->
   <!--  <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        <property name="driverClassName" value="${mysql.driverClassName}" />
        <property name="url" value="${mysql.url}" />
        <property name="username" value="${mysql.username}" />
        <property name="password" value="${mysql.password}" />
        连接池启动时的初始值
        <property name="initialSize" value="${mysql.initialSize}" />
        连接池的最大值
        <property name="maxActive" value="${mysql.maxActive}" />
        最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止
        <property name="maxIdle" value="${mysql.maxIdle}" />
         最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请
        <property name="minIdle" value="${mysql.minIdle}" />
    </bean> -->
    <!-- 数据库连接池   -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName">
			<value>${jdbc.driver}</value>
		</property>
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<property name="maxActive">
			<value>200</value>
		</property>
		<property name="maxIdle">
			<value>120</value>
		</property>
		<property name="initialSize">
			<value>30</value>
		</property>
		<property name="maxWait">
			<value>25000</value>
		</property>
	</bean>
     <!-- 创建spring jdbcTemplate-->
  <bean class="org.springframework.jdbc.core.JdbcTemplate" id="jdbcTemplate">
    <property name="dataSource" ref="dataSource"></property>
  </bean>
  
  <!-- Spring自己的基于java.util.concurrent.ConcurrentHashMap实现的缓存管理器(该功能是从Spring3.1开始提供的) -->
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean name="myCache"
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" />
					
				<bean name="indexDataCache"
           class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean" /> 
			</set>
		</property>
	</bean>
	
<!--
        采用注解方式来配置事务。针对数据源的事务管理器
        ，把我们定义的数据源注入到DataSourceTransactionManager类的属性dataSource中
    -->
    <bean id="txManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
   <!--  <tx:annotation-driven transaction-manager="txManager" />  -->
   <!-- 事务管理配置 -->
	<!-- <bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean> -->

	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- newExcute方法开头的方法将在新事务中执行 -->
			<tx:method name="newExcute*" propagation="REQUIRES_NEW" />
			<!-- nestedExcute方法开头的方法将在嵌套事务中执行 -->
			<tx:method name="nestedExcute*" propagation="NESTED" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED"  rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>

	<aop:config><!-- proxy-target-class="true" -->
		<aop:pointcut id="interceptorDAO"
			expression="execution(* com.searchinner.dao..*.*(..))" />
		<aop:pointcut id="interceptorOperation"
			expression="execution(* com.searchinner.service.dao..*.*(..))" />
		<aop:pointcut id="interceptor"
			expression="execution(* com.searchinner.dao..*.*(..)) || execution(* com.searchinner.service.dao..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptor" />
	</aop:config>
	<!-- 事务管理配置结束 -->
     
</beans>